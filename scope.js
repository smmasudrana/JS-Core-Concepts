if(true){
    const data = 58;
    console.log('inside the if block', data);
}

//-----------
for(const num of [1, 5 , 6, 8, 9]){

}

//function scope or local scope
function doMath(a,b){
    console.log(a, b);
    const sum = a + b;
    const total = sum + 10;
    return total;
}




// 1. Global Scope
// üëâ ‡¶Ø‡ßá‡¶ï‡ßã‡¶®‡ßã ‡¶≠‡ßç‡¶Ø‡¶æ‡¶∞‡¶ø‡¶Ø‡¶º‡ßá‡¶¨‡¶≤ function ‡¶¨‡¶æ block ‡¶è‡¶∞ ‡¶¨‡¶æ‡¶á‡¶∞‡ßá ‡¶°‡¶ø‡¶ï‡ßç‡¶≤‡ßá‡ßü‡¶æ‡¶∞ ‡¶ï‡¶∞‡¶≤‡ßá ‡¶∏‡ßá‡¶ü‡¶æ global ‡¶π‡ßü ‚Üí ‡¶∏‡¶¨ ‡¶ú‡¶æ‡ßü‡¶ó‡¶æ ‡¶•‡ßá‡¶ï‡ßá access ‡¶ï‡¶∞‡¶æ ‡¶Ø‡¶æ‡ßü‡•§
let globalVar = "I am global";

function showGlobal() {
  console.log(globalVar); // accessible
}


// 2. Function Scope--------------------
// üëâ var, let, const ‡¶¶‡¶ø‡ßü‡ßá function ‡¶è‡¶∞ ‡¶≠‡ßá‡¶§‡¶∞‡ßá ‡¶°‡¶ø‡¶ï‡ßç‡¶≤‡ßá‡ßü‡¶æ‡¶∞ ‡¶ï‡¶∞‡¶æ ‡¶≠‡ßç‡¶Ø‡¶æ‡¶∞‡¶ø‡¶Ø‡¶º‡ßá‡¶¨‡¶≤ ‡¶∂‡ßÅ‡¶ß‡ßÅ ‡¶ê function ‡¶è‡¶∞ ‡¶≠‡ßá‡¶§‡¶∞‡ßá accessible‡•§

function myFunc() {
  let funcVar = "I am inside function";
  console.log(funcVar); // ‚úÖ works
}
myFunc();


// 3. Block Scope (let & const)------------
// üëâ { } ‡¶¨‡ßç‡¶≤‡¶ï‡ßá‡¶∞ ‡¶Æ‡¶ß‡ßç‡¶Ø‡ßá ‡¶°‡¶ø‡¶ï‡ßç‡¶≤‡ßá‡ßü‡¶æ‡¶∞ ‡¶ï‡¶∞‡¶æ let ‡¶ì const ‡¶ï‡ßá‡¶¨‡¶≤ ‡¶ì‡¶á ‡¶¨‡ßç‡¶≤‡¶ï‡ßá‡¶∞ ‡¶≠‡ßá‡¶§‡¶∞‡ßá‡¶á ‡¶¨‡ßç‡¶Ø‡¶¨‡¶π‡¶æ‡¶∞ ‡¶ï‡¶∞‡¶æ ‡¶Ø‡¶æ‡ßü‡•§

if (true) {
  let blockVar = "I am block scoped";
  console.log(blockVar); // ‚úÖ works
}


// 4. Lexical Scope / Closure----------------
// üëâ Inner function outer scope ‡¶è‡¶∞ variable access ‡¶ï‡¶∞‡¶§‡ßá ‡¶™‡¶æ‡¶∞‡ßá ‚Üí ‡¶è‡¶ï‡ßá closure ‡¶¨‡¶≤‡ßá‡•§

function outer() {
  let outerVar = "Hello";
  function inner() {
    console.log(outerVar); // ‚úÖ accessible due to closure
  }
  inner();
}
outer();